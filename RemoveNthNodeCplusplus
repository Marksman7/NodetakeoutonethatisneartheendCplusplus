#include <string>
#include <iostream>
#include <stdlib.h>
#include <cstdlib>

/*
struct node {
    int data;
    node* next;
};
*/


#ifndef LIST_H
#define LIST_H
class Lister {
private:
    typedef struct node {
        int data;
        node* next;
    }* nodePtr;


    nodePtr head;
    nodePtr curr;
    nodePtr temp;
public:
    Lister();
    void AddNode(int addy);
    void deleteNode(int dont);
    void PrintList();
    int BackWardit(int howmany);
};

#endif 

Lister::Lister() {
    head = NULL;
    curr = NULL;
    temp = NULL;
}

void Lister::AddNode(int addy)
{
    nodePtr n = new node;
    n->next = NULL;
    n->data = addy;

    if (head != NULL)
    {
        curr = head;
        while (curr->next != NULL)
        {
            curr = curr->next;
        }
        curr->next = n;
    }
    else
    {
        head = n;
    }
}

void Lister::deleteNode(int dont)
{
    nodePtr delPtr = NULL;
    temp = head;
    curr = head;
    while(curr != NULL && curr->data != dont)
    {
        temp = curr;
        curr = curr->next;

    }

    if (curr == NULL)
    {
        std::cout << dont << " was not in the list"  << std::endl;
        delete delPtr;
    }
    else
    {
        delPtr = curr;
        curr = curr->next;
        temp->next = curr;
        if (delPtr == head)
        {
            head = head->next;
            temp = NULL;
        }
        delete delPtr;
        //deleted ya!
    }
}

int Lister::BackWardit(int howmany)
{
    int sofar = 0;

    int nono = 0;

    curr = head;
    while (curr != NULL)
    {
        sofar = (sofar * 10) + curr->data;
        //std::cout << sofar << std::endl;
        curr = curr->next;
    }

    for (int i = 1; i < howmany; i++)
    {
        sofar = (sofar - (sofar % 10)) / 10;
    }

    nono = (sofar % 10);

    return nono;
}


void Lister::PrintList()
{
    curr = head;
    while (curr != NULL)
    {
        std::cout << "[" << curr->data << "] ";
        curr = curr->next;
    }
    std::cout << "" << std::endl;
}

int main()
{
    int n = 0;

    int number = 1039827465;

    int tacker = 0;


    Lister Only;

    while (1 < number)
    {
        tacker = tacker + number % 10;
        number = (number - (number % 10)) / 10;
        tacker = tacker * 10;
    }

    tacker = tacker / 10;

    while (1 < tacker)
    {
        Only.AddNode((tacker % 10));

        tacker = (tacker - (tacker % 10)) / 10;

    }

    Only.PrintList();

   n = Only.BackWardit(2);

   Only.deleteNode(n);

   Only.PrintList();

   //would be so much simpler wiht an vector or array

    //int number = 26435;
    //struct node* Only, *next;
    //Only = contrcut(number);
   // std::cout << Only << std::endl;
}


/*

node* build_node(int WhatNumsWeHave)
{
    int Numro = WhatNumsWeHave;

    int tacker = 0;

    struct node* temp, *f;
    temp = new (struct node);

    if (temp != NULL)
    {
        for (int i = 0; 1 < Numro; i++)
        {
            tacker = tacker + Numro % 10;
            Numro = (Numro - (Numro % 10)) / 10;
            std::cout << Numro << std::endl;
            std::cout << "+";
            std::cout << tacker << std::endl;
            tacker = tacker * 10;
        }

        tacker = tacker / 10;

        for (int i = 0; 1 < tacker; i++)
        {
            if (temp != NULL)
            {
                temp->data = 5;
                std::cout << "+";
                std::cout << tacker << std::endl;
                std::cout << "#";
                std::cout << temp << std::endl;
                tacker = (tacker - (tacker % 10)) / 10;
            }
            else
            {
                std::cout << "nope" << std::endl;
            }
        }
        return temp;
    }
    else
    {
        std::cout << "nope" << std::endl;

    }




}

*/
